unbind C-b
set-option -g prefix C-a
bind-key C-a send-prefix

# install tmux terminfo if necessary
run-shell 'infocmp tmux tmux-256color || tic -x ~/.terminfo/tmux.terminfo'

run-shell 'tmux setenv -g TMUX_PLUGINS ~/.config/tmux/plugins'

run-shell '[ -d "$TMUX_PLUGINS"/easyjump.tmux ] || git clone https://github.com/roy2220/easyjump.tmux.git "$TMUX_PLUGINS"/easyjump.tmux'
set-option -g @easyjump-key-binding "u"
run-shell '"$TMUX_PLUGINS"/easyjump.tmux/easyjump.tmux'

bind a last-window

bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

bind "\\" split-window -h -c "#{pane_current_path}"
bind "-" split-window -v -c "#{pane_current_path}"

bind q display-popup -E "bash -ic cht_tmux"
bind f display-popup -E "bash -ic hoogle_tmux"

bind b set-option -w monitor-activity off

# start a non-login shell instead of a login shell
set -g default-command "$SHELL"

# set TMUX_DE to indicate if tmux is being run in a desktop environment or not
# set to TRUE if DISPLAY environment variable is set, or if this is an ssh session, or if kernel release string contains Darwin or Microsoft (assume we're using wsl)
run-shell 'tmux setenv -g TMUX_DE "$([ -n "$DISPLAY" ] || [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ] || uname -a | grep -q "Microsoft\|Darwin" && echo TRUE)"'

# set terminal to 256 colors if we're in a desktop environment otherwise assume we only have 8 colors
if-shell '[ -z "$TMUX_DE" ]' "set -g default-terminal tmux" "set -g default-terminal tmux-256color"
# tell tmux that outside terminal supports true color
if-shell '[ -z "$TMUX_DE" ]' "" "set -ga terminal-overrides ',xterm-256color*:Tc,alacritty*:Tc'"

bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'V' send -X select-line
# set copy behavior based on desktop environment
if-shell '[ -z "$TMUX_DE" ]' "bind-key -T copy-mode-vi 'y' send -X copy-selection-and-cancel" "bind-key -T copy-mode-vi 'y' send -X copy-pipe-and-cancel 'xclip -selection clipboard -i'"

bind-key -r n next-window
bind-key -r p previous-window
set -g repeat-time 250

set -g mouse on
set -g mode-keys vi
set -g status-keys vi
set-option -g allow-rename off

# delay after pressing escape to wait for another key
# remove delay to increase mode change responsiveness in vi
set -sg escape-time 0

set -g history-limit 50000

# activity/bells
set-option -g visual-activity off
set-option -g visual-bell off
set-option -g visual-silence off
set-option -g bell-action none
set-window-option -g monitor-activity on

# only show status bar if there is more then one window
set -g status off
set-hook -g after-new-window      'if "[ #{session_windows} -gt 1 ]" "set status on"'
set-hook -g after-kill-pane       'if "[ #{session_windows} -lt 2 ]" "set status off"'
set-hook -g pane-exited           'if "[ #{session_windows} -lt 2 ]" "set status off"'
set-hook -g window-layout-changed 'if "[ #{session_windows} -lt 2 ]" "set status off"'

# statusbar
set -g status-interval 1
set -g status-position bottom
set -g status-justify centre
set -g status-style bg=color8
set -g status-left ''
set -g status-right ''

# active window
setw -g window-status-current-style bg=color0
setw -g window-status-current-format ' #[fg=color1]#I #[fg=color3]#W#[fg=color4]#F '

# inactive window
setw -g window-status-style bg=color8
setw -g window-status-format ' #[fg=color88]#I #[fg=color94]#W#[fg=color4]#F '

# inactive window with activity
setw -g window-status-activity-style bg=color233

# panes
set -g pane-border-style fg=color8
set -g pane-active-border-style fg=color3

# highlighting
setw -g mode-style bg=color3,fg=color0

# console
set -g message-style bg=color0,fg=color3
